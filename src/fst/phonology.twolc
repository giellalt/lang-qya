!! =================================== !
!! The Quenya morphophonological/twol rules file !
!! =================================== !

Alphabet
    a b c d e f g h i j k l m n o p q r s t u v w x y
    á é í ó ú ä ë ï ö ü þ ñ %{w%}

    A B C D E F G H I J K L M N O P Q R S T U V W X Y
    Á É Í Ó Ú Ä Ë Ï Ö Ü Þ Ñ

    ! things to automatically convert (unless otherwise specified below)
    %>:e  ! start of case ending
    %*:0  ! marks an adjective ending in -e with an -i stem

    %{stemd20%}:d %{stemt20%}:t %{stemm2n%}:m %{stems20%}:s %{stemn20%}:n
    %{stemu2o%}:u %{stemi2e%}:i
    %{steme2é%}:e %{stemi2í%}:i

    %{i%}:i %{í%}:í
    %{o%}:o
    %{%-V%}:0
    %{l%}:l
    %{%+%}:0

;

! allowed initial consonant clusters: x, ps, ty, ny, ly, qu, ñw (became nw)
! allowed medial consonant clusters: ht, lc, ld, lf, lm, lp, lqu, lt, lv, lw, ly, mb, mn, mp, my, nc, nd, ng, nt, nw (ñw initial only), ny, ps, pt, qu, rc, rd, rm, rn, rp, rt, rs, rv, rw, ry, sc, st, sw, ts, tw, ty, x=cs, pp, tt, cc, mm, nn, ss, ll, rr
! allowed medial tri-consonantal clusters: nqu, lqu, rqu, squ, ngw, rhw, nty, lty, hty, rty, sty, lhy
! allowed final consonants: n, r, l, s, t, nt

Sets
    ShortVowel = a e i o u ä ë ï ö ü
                 A E I O U Ä Ë Ï Ö Ü ;
    LongVowel = á é í ó ú
                Á É Í Ó Ú ;
    Vowel = ShortVowel LongVowel ;

    Consonant = b c d f g h l m n ñ p q r s þ t v w x y %{w%}
                B C D F G H L M N Ñ P Q R S Þ T V W X Y ;


Definitions
    ConsonantCluster = [:Consonant :Consonant] | :x ;  ! x is really cs
    Diphthong = [:a :i] | [:a :u] | [:e :u] | [:o :i] | [:u :i] | [:i :u] ;



Rules


"Convert cu to qu when followed by a vowel, if the u is a u->o stem (cu/qu part 1)"
    c:q <=> _ %{stemu2o%}: :0* [[Vowel - u] | u Vowel] ;
"If the next vowel is a u, make stemu2o go to 0, not u (cu/qu  2)"
    %{stemu2o%}:0 <=> c: _ :0* u ;

"Delete a 'u' that's in the case ending if it's followed by a vowel (gu/gw part 1)"
    u:0 <=> g %{stemu2o%}: %>: %{%-V%}: _ Vowel ;
"Convert gu to gw when followed by a vowel, if the u is a u->o stem (gu/gw part 2)"
    %{stemu2o%}:w <=> g _ :0* [Vowel - u] ;
"If the next vowel is a u, make stemu2o go to 0, not u (gu/gw part 3)"
    %{stemu2o%}:0 <=> g _ :0* u ;


"Plural endings with {i} or {í} delete a preceding e"
    e:0 <=> _ (%{%+%}:0) %>:0 [%{i%}: | %{í%}:] ;
"If the ending {i} deletes a preceding -e (in -ie), it becomes é"
    %{i%}:é <=> i e:0 [:0 - e:]* _ ;
"Plural endings with {i} delete a preceding i"
    i:0 <=> _ %>:0 %{i%}: ;
"If the ending {i} deletes a preceding i, it could become long"
    %{i%}:í => [i:0 | %{stemi2e%}:0] [:0 - i:]* _ ;

"Adjective with an i2e stem, no case suffix, delete the i2e; also {-V} and a plural ending with {i} both delete it"
    %{stemi2e%}:0 <=> _ %*: [i | e] .#. ;
                      _ (%*:) %>:0 [%{%-V%}: | %{i%}:] ;


"Words marked with {+} have the final vowel lengthened with certain endings, also marked with {+}"
    Vx:Vy => _ %{%+%}: ?* %{%+%}: .#. ;
        where   Vx in (a e i o u)
                Vy in (á é í ó ú)
            matched ;


"Genitive ending {o} deletes a preceding a,o"
    Vx:0 <=> _ %>:0 %{o%}: ;
        where Vx in (a o) ;
"Deleting a short vowel from a triggered deletion"
    Vx:0 <=> _ (%{%+%}:0) %>:0 %{%-V%}: ;
        where Vx in (ShortVowel) ;


"Stems that alter when no suffix is attached"
    [ %{stemd20%}:0 | %{stemt20%}:0 | %{stems20%}:0 | %{stemn20%}:0 | %{stemm2n%}:n
    | %{stemu2o%}:o | %{stemi2e%}:e
    | %{steme2é%}:é | %{stemi2í%}:í ]
        <=> _ ?* %>: :0* .#. ;


"Assimilate r to l when at a morpheme boundary"
    r:l <=> :Vowel _ %>: %{l%}: ;
"Optionally assimilate n,s to l when at a morpheme boundary"
    [ n:l | s:l ] => :Vowel _ %>: %{l%}: ;

"Situations that force the morpheme boundary to become 0; good phonotactics"
    %>:0 <=>
            _ :0* .#. ;  ! nothing after
            :Vowel :0* _ ; _ :0* :Vowel ;  ! Adjacent vowel
            :Vowel :n :0* _ :t .#. ;  ! Vnt#
            :Vowel :Cx :0* _ :0* :Cy :Vowel ;  ! a combination that's specifically allowed
                where   Cx in (h l l l l l l l l l     l m m m m n n n n n     n p p r r r r r r r r r     r s s s     t t     t c p t c m n s l r)
                        Cy in (t c d f m p q t v %{w%} y b n p y c d g t %{w%} y s t c d m n p t s v %{w%} y c t %{w%} s %{w%} y s p t c m n s l r)
                    matched ;
