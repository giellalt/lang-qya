!! =================================== !
!! The Quenya morphophonological/twol rules file !
!! =================================== !

Alphabet
    a b c d e f g h i j k l m n o p q r s t u v w x y
    á é í ó ú ä ë ï ö ü þ ñ %{w%}

    A B C D E F G H I J K L M N O P Q R S T U V W X Y
    Á É Í Ó Ú Ä Ë Ï Ö Ü Þ Ñ

    ! things to automatically convert (unless otherwise specified below)
    %|:e  ! start of a possessive suffix
    %>:e  ! start of case ending
    %*:0  ! marks an adjective ending in -e with an -i stem

    %{stemd20%}:d %{stemt20%}:t %{stemm2n%}:m %{stems20%}:s %{stemn20%}:n
    %{stemu2o%}:u %{stemi2e%}:i
    %{steme2é%}:e %{stemi2í%}:i

    %{i%}:i %{í%}:í
    %{o%}:o
    %{%-V%}:0
    %{l%}:l
    %{%+%}:0
    %{n%}:n

;

! allowed initial consonants: p, q, t, c, f, s, h, m, n, ñ, v, l, r, y, w
! allowed initial consonant clusters: hy, hw, hl, hr, x, ps, ty, ny, ly, ñw (became nw)
! allowed medial consonant clusters: ht, lc, ld, lf, lm, lp, lq, lt, lv, lw, ly, mb, mn, mp, my, nc, nd, nf (henfanwa), ng, nq, nt, nv, nw (ñw initial only), ny, ps, pt, qu, rc, rd, rm, rn, rp, rq, rt, rs, rv, rw, ry, sc, sq, st, sw, ts, tw, ty, x=cs, pp, tt, cc, mm, nn, ss, ll, rr
! allowed medial tri-consonantal clusters: ngw, rhw, nty, lty, hty, rty, sty, lhy
! allowed final consonants: n, r, l, s, t, nt

Sets
    ShortVowel = a e i o u ä ë ï ö ü
                 A E I O U Ä Ë Ï Ö Ü ;
    LongVowel = á é í ó ú
                Á É Í Ó Ú ;
    Vowel = ShortVowel LongVowel ;

    Consonant = b c d f g h l m n ñ p q r s þ t v w x y %{w%}
                B C D F G H L M N Ñ P Q R S Þ T V W X Y ;


Definitions
    ConsonantCluster = [:Consonant :Consonant] | :x ;  ! x is really cs
    Diphthong = [:a :i] | [:a :u] | [:e :u] | [:o :i] | [:u :i] | [:i :u] ;
    SuperlPrefixNeedsInsert = [ConsonantCluster - [:t :y]] ;  ! ty is the only cluster that can start a word which n is allowed to precede



Rules


"Convert cu to qu when followed by a vowel, if the u is a u->o stem (cu/qu part 1)"
    c:q <=> _ %{stemu2o%}: :0* [[Vowel - u] | u Vowel] ;
"If the next vowel is a u, make stemu2o go to 0, not u (cu/qu  2)"
    %{stemu2o%}:0 <=> c: _ :0* u ;

"Delete a 'u' that's in the case ending if it's followed by a vowel (gu/gw part 1)"
    u:0 <=> g %{stemu2o%}: %>: %{%-V%}: _ Vowel ;
"Convert gu to gw when followed by a vowel, if the u is a u->o stem (gu/gw part 2)"
    %{stemu2o%}:w <=> g _ :0* [Vowel - u] ;
"If the next vowel is a u, make stemu2o go to 0, not u (gu/gw part 3)"
    %{stemu2o%}:0 <=> g _ :0* u ;


"Plural endings with {i} or {í} delete a preceding e"
    e:0 <=> _ (%{%+%}:0) %>:0 [%{i%}: | %{í%}:] ;
"If the ending {i} deletes a preceding -e (in -ie), it becomes é"
    %{i%}:é <=> i e:0 [:0 - e:]* _ ;
"Plural endings with {i} delete a preceding i"
    i:0 <=> _ %>:0 %{i%}: ;
"If the ending {i} deletes a preceding i, it could become long"
    %{i%}:í => [i:0 | %{stemi2e%}:0] [:0 - i:]* _ ;

"Adjective with an i2e stem, no case suffix, delete the i2e; also {-V} and a plural ending with {i} both delete it"
    %{stemi2e%}:0 <=> _ %*: [i | e] .#. ;
                      _ (%*:) %>:0 [%{%-V%}: | %{i%}:] ;


"Words marked with {+} have the final vowel lengthened with certain endings, also marked with {+}"
    Vx:Vy => _ %{%+%}: ?* %{%+%}: .#. ;
        where   Vx in (a e i o u)
                Vy in (á é í ó ú)
            matched ;


"Genitive ending {o} deletes a preceding a,o"
    Vx:0 <=> _ %>:0 %{o%}: ;
        where Vx in (a o) ;
"Deleting a short vowel from a triggered deletion"
    Vx:0 <=> _ (%{%+%}:0) %>:0 %{%-V%}: ;
        where Vx in (ShortVowel) ;


"Stems that alter when no suffix is attached"
    [ %{stemd20%}:0 | %{stemt20%}:0 | %{stems20%}:0 | %{stemn20%}:0 | %{stemm2n%}:n
    | %{stemu2o%}:o | %{stemi2e%}:e
    | %{steme2é%}:é | %{stemi2í%}:í ]
        <=> _ [? - %|:]* %>: :0* .#. ;


"Assimilate r to l when at the start of a case ending"
    r:l <=> :Vowel _ %>: %{l%}: ;
"Optionally assimilate n,s,þ to l when at the start of a case ending"
    [ n:l | s:l | þ:l] => :Vowel _ %>: %{l%}: ;

"Situations that force the > at the start of a case ending to become 0; good phonotactics"
    %>:0 <=>
            _ :0* .#. ;  ! nothing after
            :Vowel :0* _ ; _ :0* :Vowel ;  ! Adjacent vowel
            :Vowel :n :0* _ :t .#. ;  ! Vnt#
            :Vowel :Cx :0* _ :0* :Cy :Vowel ;  ! a combination that's specifically allowed
                where   Cx in (h l l l l l l l l l     l m m m m n n n n n n n n     n p p r r r r r r r r r r     r s s s s     t t     t c p t c m n s l r)
                        Cy in (t c d f m p q t v %{w%} y b n p y c d f g q t v %{w%} y s t c d m n p q t s v %{w%} y c q t %{w%} s %{w%} y s p t c m n s l r)
                    matched ;

! superlative adjectival prefix 'an-' (or 'a{n}<')
"The boundary from the prefix a{n}<- needs to become non-zero, part 1 (list the allowed options)"
    [%<:a | %<:%-] => %{n%}: _ SuperlPrefixNeedsInsert ;
"The boundary from the prefix a{n}<- needs to become non-zero, part 2 (disallow 0)"
    %<:0 /<= %{n%}: _ SuperlPrefixNeedsInsert ;
"{n} does not need to change"  ! [vowel c f n q t v w {w} y] are allowed following letters with no change to n
    %{n%}:n <=> _ [%<: - :0] ;  ! inserting a divider thing also means no change
                _ %<:0 h: ;  ! if the border goes to 0, then the h is not in a cluster and will change to c, so the n gets to stay
                _ %<:0 :Vowel ;
                _ %<:0 :Cx ;
                    where Cx in (c f n q t v w %{w%} y) ;
! need change: h l m p r s þ, consonant clusters (including x, excepty ty)
"Total assimilation of {n}"
    %{n%}:Cx <=> _ %<:0 :Cx :Vowel ;
        where Cx in (l r s þ) ;
"Labialization of {n}"
    %{n%}:m <=> _ %<:0 [:p | :m] :Vowel ;
"If the root starts with h-, the border goes to 0, and the n stays, then the h turns to c"
    h:c <=> %{n%}:n %<:0 _ ;


! possessive suffixes
"The | at the start of a possessive ending becomes 0 when preceded by a vowel"
    %|:0 <=> :Vowel _ ;
"The | at the start of a possessive ending becomes i when preceded by a consonant and followed by nya"
    %|:i <=> :Consonant _ n y a: ;
